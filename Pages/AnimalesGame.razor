@page "/AnimalesGame"
@using Models
@using Microsoft.AspNetCore.Identity
@using System.Timers
@using BLL

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject RankingUsuariosBLL RankingUsuariosBLL


<style>
    .container {
        width: 450px;
    }

    /* .divTablanJuego {
        position: absolute;
        top: 475px;
        left: 450px;
    }
       */
    .buttonEmojis {
        width: 75px;
        height: 75px;
        font-size: 50px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
</style>

<div class="container">

    <h3>AnimalesGame - Nivel: @Nivel</h3>

    <div class="row">
        <hr />
        <h4>Puntos Totales: @puntosTotales</h4>
        <hr />
        <h4>Tiempo Total: @TiempoTotal</h4>

        @if (seInicioElJuego && @Nivel <= 4)
        {
            @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
            {
                var animal = shuffledAnimals[animalNumber];

                var uniqueDescription = $"Button #{animalNumber}";
                <div class="col-2">

                    <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                            type="button" class="btn buttonEmojis btn-outline-dark">

                        <h1>@animal</h1>
                    </button>

                </div>
            }
        }
        else if(@Nivel<5)
        {
            <button @onclick="@(() => IniciarPartida())" class="btn btn-danger"> Iniciar Partida </button>

        }

    </div>
</div>

<div class="divTablanJuego">
    <div class="row">
        <h2>Parejas Encontradas: @matchesFound</h2>
    </div>

    <div class="row">

        <h2>Puntos: @puntos</h2>

    </div>

    <div class="row">

        <h2>Tiempo: @timeDisplay</h2>

    </div>

</div>

<div class="row">
    @if (seInicioElJuego && !(@matchesFound == CantidadDeEmojis(shuffledAnimals)))
    {
        <input class="btn btn-danger" type="button" onclick="document.location.reload();" value="Terminar La Partida">
    }
</div>

<div class="row">
    @if (@matchesFound == CantidadDeEmojis(shuffledAnimals) && @Nivel > 4)
    {

        <input class="btn btn-success" type="button" onclick="document.location.reload();" value="Volver a Jugar">

        <AuthorizeView>

            <Authorized>

                @if (!fueGuardado)
                {
                    <button @onclick="@(() =>GuardarEnRankingUsuarios(context.User.Identity.Name))" class="btn btn-success"> Guardar Puntuacion </button>
                }
            </Authorized>

            <NotAuthorized>
                <hr />
                <h2>Debe de estar Logueado Para Guardar su puntaje</h2>
            </NotAuthorized>
        </AuthorizeView>
    }
</div>


@code {

    int puntosTotales = 0;
    float TiempoTotal = 0f;

    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    int puntos = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    bool seInicioElJuego = false;
    int Nivel = 1;

    bool fueGuardado = false;

    protected override void OnInitialized()
    {

        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();

        shuffledAnimals = ActualizarNivelDeListas(Nivel)
        .OrderBy(item => random.Next())
        .ToList();

        matchesFound = 0;
        puntos = 0;
        seInicioElJuego = false;
        tenthsOfSecondsElapsed = 0;
        timeDisplay = "0";
        fueGuardado = false;
        timer.Stop();
    }

    string lastAnimalFound = string.Empty;

    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            if (CantidadDeEmojis(shuffledAnimals) > matchesFound)
            {
                timer.Start();
            }

        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found! Reset for next pair.
            lastAnimalFound = string.Empty;

            // Replace found animals with empty string to hide them.
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            matchesFound++;

            puntos += ObtenerPuntoPorTiempo(tenthsOfSecondsElapsed / 10F);

            puntosTotales += ObtenerPuntoPorTiempo(tenthsOfSecondsElapsed / 10F);

            if (matchesFound == CantidadDeEmojis(shuffledAnimals))
            {
                TiempoTotal += (tenthsOfSecondsElapsed / 10F);
                timer.Stop();

                if (Nivel <= 4)
                {

                    Nivel++;
                    seInicioElJuego = false;
                }



            }
        }
        else
        {
            // User selected a pair that don't match.
            // Reset selection.
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;

            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();



        });
    }

    private int CantidadDeEmojis(List<string> emojis)
    {
        return (emojis.Count / 2);
    }

    private int ObtenerPuntoPorTiempo(float tiempo)
    {


        if (tiempo <= 5)
        {
            return 125;
        }
        else if (tiempo > 5 && tiempo <= 10)
        {
            return 100;
        }
        else if (tiempo > 10 && tiempo <= 15)
        {
            return 75;
        }
        else if (tiempo > 15 && tiempo <= 20)
        {
            return 50;
        }
        else if (tiempo > 20)
        {
            return 25;
        }

        return puntos;
    }

    private List<string> ActualizarNivelDeListas(int nivel)
    {
        List<string> animalEmoji = new List<string>();

        switch (nivel)
        {
            case 1:
                animalEmoji = new List<string>()
            {
                    "🐺","🐺",
                    "🦑","🦑",
                    "🐱","🐱",
                    "🦓","🦓",
                    "🐯","🐯",
                    "🐗","🐗",
                    "🐍","🐍",
                    "🐬","🐬",
                    "🐞","🐞",
                };

                break;

            case 2:
                animalEmoji = new List<string>()
            {
                    "🐶","🐶",
                    "🐺","🐺",
                    "🐮","🐮",
                    "🦊","🦊",
                    "🐱","🐱",
                    "🦁","🦁",
                    "🐯","🐯",
                    "🐹","🐹",
                    "🐗","🐗",
                    "🐍","🐍",
                    "🐬","🐬",
                    "🐢","🐢",
                    "🐭","🐭",
                    "🐰","🐰",
                    "🐷","🐷",

                };
                break;

            case 3:
                animalEmoji = new List<string>()
            {
                    "🐱","🐱",
                    "🦁","🦁",
                    "🐤","🐤",
                    "🐶","🐶",
                    "🐻","🐻",
                    "🐵","🐵",
                    "🐟","🐟",
                    "🐬","🐬",
                    "🐋","🐋",
                    "🐘","🐘",
                    "🦈","🦈",
                    "🦛","🦛",
                    "🦏","🦏",
                    "🐃","🐃",
                    "🐩","🐩",
                    "🦊","🦊",
                    "🐯","🐯",
                    "🐠","🐠",
                    "🦗","🦗",
                    "🦎","🦎",
                    "🐉","🐉",

                };

                break;

            case 4:
                animalEmoji = new List<string>()
            {
                    "🐭","🐭",
                    "🐰","🐰",
                    "🐼","🐼",
                    "🐨","🐨",
                    "🦇","🦇",
                    "🐙","🐙",
                    "🦐","🦐",
                    "🐜","🐜",
                    "🦀","🦀",
                    "🐠","🐠",
                    "🐵","🐵",
                    "🙈","🙈",
                    "🙉","🙉",
                    "🙊","🙊",
                    "🐒","🐒",
                    "🦗","🦗",
                    "🐢","🐢",
                    "🐍","🐍",
                    "🦎","🦎",
                    "🐊","🐊",
                    "🐱","🐱",
                    "🦁","🦁",
                    "🐣","🐣",
                    "🦘","🦘",
                    "🐈","🐈",
                    "🐐","🐐",
                    "🐇","🐇",

                };
                break;
        }
        return animalEmoji;
    }

    public void TerminarPartida()
    {
        timer.Stop();
    }

    public void IniciarPartida()
    {


        timer.Start();
        seInicioElJuego = true;
        tenthsOfSecondsElapsed = 0;
        matchesFound = 0;
        puntos = 0;
        timeDisplay = "0";

        Random random = new Random();

        shuffledAnimals = ActualizarNivelDeListas(Nivel)
        .OrderBy(item => random.Next())
        .ToList();

    }


    public void GuardarEnRankingUsuarios(string nombreUsuario)
    {
        RankingUsuarios ranking = new RankingUsuarios();

        ranking.Nombre = nombreUsuario;
        ranking.puntos = puntosTotales;
        ranking.tiempo = TiempoTotal;

        try
        {
            fueGuardado = RankingUsuariosBLL.Guardar(ranking);
        }
        catch (Exception)
        {

        }


    }

}
